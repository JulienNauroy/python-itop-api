#!/usr/bin/env python
# -*- coding: utf8 -*-fr
#pylint: skip-file
"""
itop-cli is a basic CLI interface for iTop REST interface
"""

__version__ = '1.0'
__authors__ = ['Guillaume Philippon <guillaume.philippon@lal.in2p3.fr>']

from itopapi.controller import ItopapiController
import argparse
import ConfigParser


def main():
    """
    Main function
    """

    #################
    # Load CLI args #
    #################
    parse = argparse.ArgumentParser(description="python CLI for iTop REST api")
    parse.add_argument('--hostname', dest='hostname',
                       help='hostname of iTop server')
    parse.add_argument('--username', dest='username',
                       help='Username')
    parse.add_argument('--password', dest='password',
                       help='Password')
    parse.add_argument('--config', dest='config_file',
                       help='Configuration file',
                       default='./itop-cli.cfg')
    parse.add_argument('--classes', dest='classes', nargs='*',
                       help='Display information about classes')
    parse.add_argument('--quattor-profile', dest='quattor_profile',
                       help='JSON representation of quattor profile')
    parse.add_argument('--organization-name', dest='organization',
                       help='iTop organization name Used when put information into iTop')
    options = parse.parse_args()

    #################
    # Default Value #
    #################
    hostname = None
    username = None
    password = None
    protocol = 'https'
    base_uri = '/'
    api_version = '1.0'
    api_suffix = '/webservices/rest.php'
    quattor_profile = None
    organization = None

    ##########################################
    # Value overwrited by configuration file #
    ##########################################
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(options.config_file)
    try:
        hostname = config_parser.get('main', 'hostname')
    except ConfigParser.NoOptionError:
        pass
    try:
        username = config_parser.get('main', 'username')
    except ConfigParser.NoOptionError:
        pass
    try:
        password = config_parser.get('main', 'password')
    except ConfigParser.NoOptionError:
        pass
    try:
        protocol = config_parser.get('main', 'protocol')
    except ConfigParser.NoOptionError:
        pass
    try:
        base_uri = config_parser.get('main', 'base_uri')
    except ConfigParser.NoOptionError:
        pass
    try:
        api_version = config_parser.get('main', 'api_version')
    except ConfigParser.NoOptionError:
        pass
    try:
        api_suffix = config_parser.get('main', 'api_suffix')
    except ConfigParser.NoOptionError:
        pass

    ###############################
    # Value overwrite by CLI args #
    ###############################
    if options.hostname is not None:
        hostname = options.hostname
    if options.username is not None:
        username = options.username
    if options.password is not None:
        password = options.password
    if options.quattor_profile is not None:
        quattor_profile = options.quattor_profile
    if options.organization is not None:
        organization = options.organization

    ####################
    # Some value check #
    ####################
    if hostname is None or username is None or password is None:
        print "Hostname/Username/Password missing"
        exit(1)

    ############################
    # Create config dictionary #
    ############################
    config = {
        'hostname': hostname,
        'username': username,
        'password': password,
        'protocol': protocol,
        'base_uri': base_uri,
        'version': api_version,
        'api_suffix': api_suffix,
        'organization': organization
    }

    #####################################
    # Retrieve quattor profile if asked #
    #####################################
    if quattor_profile is not None:
        quattor_controller = ItopapiController(config)
        quattor_controller.load_from_quattor(quattor_profile)
        quattor_controller.display()

    if options.classes is not None:
        for itop_class in options.classes:
            class_controller = ItopapiController(config)
            class_controller.load_from_model(itop_class)
            class_controller.display()

if __name__ == "__main__":
    main()
