#!/usr/bin/env python
# -*- coding: utf8 -*-fr
#pylint: skip-file
"""
itop-cli is a basic CLI interface for iTop REST interface
"""

__version__ = '1.0'
__authors__ = ['Guillaume Philippon <guillaume.philippon@lal.in2p3.fr>']

from itopapi import ItopapiRack, ItopapiServer
import argparse
import ConfigParser


def main():
    """
    Main function
    """

    #################
    # Load CLI args #
    #################
    parse = argparse.ArgumentParser(description="python CLI for iTop REST api")
    parse.add_argument('--hostname', dest='hostname', help='URI of rest API of itop')
    parse.add_argument('--username', dest='username', help='Username')
    parse.add_argument('--password', dest='password', help='Password')
    parse.add_argument('--config', dest='config_file', help='Configuration file',
                       default='./itop-cli.cfg')
    options = parse.parse_args()

    #################
    # Default Value #
    #################
    hostname = None
    username = None
    password = None
    protocol = 'https'
    base_uri = '/'
    api_version = '1.0'
    api_suffix = '/webservices/rest.php'

    ##########################################
    # Value overwrited by configuration file #
    ##########################################
    config_parser = ConfigParser.ConfigParser()
    config_parser.read(options.config_file)
    try:
        hostname = config_parser.get('main', 'hostname')
    except ConfigParser.NoOptionError:
        pass
    try:
        username = config_parser.get('main', 'username')
    except ConfigParser.NoOptionError:
        pass
    try:
        password = config_parser.get('main', 'password')
    except ConfigParser.NoOptionError:
        pass
    try:
        protocol = config_parser.get('main', 'protocol')
    except ConfigParser.NoOptionError:
        pass
    try:
        base_uri = config_parser.get('main', 'base_uri')
    except ConfigParser.NoOptionError:
        pass
    try:
        api_version = config_parser.get('main', 'api_version')
    except ConfigParser.NoOptionError:
        pass
    try:
        api_suffix = config_parser.get('main', 'api_suffix')
    except ConfigParser.NoOptionError:
        pass

    ###############################
    # Value overwrite by CLI args #
    ###############################
    if options.hostname is not None:
        hostname = options.hostname
    if options.username is not None:
        username = options.username
    if options.password is not None:
        password = options.password

    ####################
    # Some value check #
    ####################
    if hostname is None or username is None or password is None:
        print "Hostname/Username/Password missing"
        exit(1)

    ############################
    # Create config dictionary #
    ############################
    config = {
        'hostname': hostname,
        'username': username,
        'password': password,
        'protocol': protocol,
        'base_uri': base_uri,
        'version': api_version,
        'api_suffix': api_suffix
    }

    #############
    # Rack list #
    #############
    racks = ItopapiRack(config)
    response = racks.list_command()
    print response
    print '#' * 80
    print 'List Available operations'
    for operation in response['operations']:
        print 'Action: {0}'.format(operation['verb'])
    print '#' * 80

    itop_racks = racks.list_objects()
    print 'List Racks'
    try:
        for rack in itop_racks['objects']:
            print itop_racks['objects'][rack]['fields']['friendlyname']
        print '#' * 80
    except:
        pass

    ###############
    # Server list #
    ###############
    servers = ItopapiServer(config)
    itop_servers = servers.list_objects()
    print 'List Servers'

    try:
        for server in itop_servers['objects']:
            print itop_servers['objects'][server]['fields']['friendlyname']
        print '#' * 80
    except:
        pass

if __name__ == "__main__":
    main()
